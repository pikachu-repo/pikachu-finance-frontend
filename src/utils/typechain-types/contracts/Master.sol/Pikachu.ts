/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IPikachu {
  export type AdminSettingStruct = {
    verifiedCollections: PromiseOrValue<string>[];
    feeTo: PromiseOrValue<string>;
    minDepositAmount: PromiseOrValue<BigNumberish>;
    platformFee: PromiseOrValue<BigNumberish>;
    blockNumberSlippage: PromiseOrValue<BigNumberish>;
  };

  export type AdminSettingStructOutput = [
    string[],
    string,
    BigNumber,
    number,
    number
  ] & {
    verifiedCollections: string[];
    feeTo: string;
    minDepositAmount: BigNumber;
    platformFee: number;
    blockNumberSlippage: number;
  };

  export type PoolStruct = {
    owner: PromiseOrValue<string>;
    status: PromiseOrValue<BigNumberish>;
    depositedAmount: PromiseOrValue<BigNumberish>;
    borrowedAmount: PromiseOrValue<BigNumberish>;
    availableAmount: PromiseOrValue<BigNumberish>;
    nftLocked: PromiseOrValue<BigNumberish>;
    totalLiquidations: PromiseOrValue<BigNumberish>;
    totalLoans: PromiseOrValue<BigNumberish>;
    totalInterest: PromiseOrValue<BigNumberish>;
    depositedAt: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
    lastLoanAt: PromiseOrValue<BigNumberish>;
    loanToValue: PromiseOrValue<BigNumberish>;
    maxAmount: PromiseOrValue<BigNumberish>;
    interestType: PromiseOrValue<BigNumberish>;
    interestStartRate: PromiseOrValue<BigNumberish>;
    interestCapRate: PromiseOrValue<BigNumberish>;
    maxDuration: PromiseOrValue<BigNumberish>;
    compound: PromiseOrValue<boolean>;
    collections: PromiseOrValue<string>[];
  };

  export type PoolStructOutput = [
    string,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    string[]
  ] & {
    owner: string;
    status: number;
    depositedAmount: BigNumber;
    borrowedAmount: BigNumber;
    availableAmount: BigNumber;
    nftLocked: BigNumber;
    totalLiquidations: BigNumber;
    totalLoans: BigNumber;
    totalInterest: BigNumber;
    depositedAt: BigNumber;
    createdAt: BigNumber;
    updatedAt: BigNumber;
    lastLoanAt: BigNumber;
    loanToValue: BigNumber;
    maxAmount: BigNumber;
    interestType: number;
    interestStartRate: BigNumber;
    interestCapRate: BigNumber;
    maxDuration: BigNumber;
    compound: boolean;
    collections: string[];
  };
}

export interface PikachuInterface extends utils.Interface {
  functions: {
    "adminSetting()": FunctionFragment;
    "borrow(address,address,uint256,uint256,uint256,bytes,uint256,uint256)": FunctionFragment;
    "calculateRepayAmount(uint256,uint8,uint256,uint256,uint256)": FunctionFragment;
    "createPool(uint256,uint256,uint8,uint256,uint256,uint256,bool,address[])": FunctionFragment;
    "depositToPool()": FunctionFragment;
    "getEthSignedMessageHash(bytes32)": FunctionFragment;
    "getMessageHash(address,uint256,uint256)": FunctionFragment;
    "getPoolById(uint256)": FunctionFragment;
    "getPoolByOwner(address)": FunctionFragment;
    "isListedCollection(address[])": FunctionFragment;
    "liquidate(address)": FunctionFragment;
    "loans(address,address)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "poolOwners(uint256)": FunctionFragment;
    "recoverSigner(bytes32,bytes)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "repay(address)": FunctionFragment;
    "splitSignature(bytes)": FunctionFragment;
    "sqrt(uint256)": FunctionFragment;
    "totalPools()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateAdminSetting((address[],address,uint256,uint32,uint32))": FunctionFragment;
    "updatePool(uint256,uint256,uint8,uint256,uint256,uint256,bool,address[])": FunctionFragment;
    "verify(address,address,uint256,uint256,bytes)": FunctionFragment;
    "withdrawFromPool(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "adminSetting"
      | "borrow"
      | "calculateRepayAmount"
      | "createPool"
      | "depositToPool"
      | "getEthSignedMessageHash"
      | "getMessageHash"
      | "getPoolById"
      | "getPoolByOwner"
      | "isListedCollection"
      | "liquidate"
      | "loans"
      | "onERC721Received"
      | "owner"
      | "poolOwners"
      | "recoverSigner"
      | "renounceOwnership"
      | "repay"
      | "splitSignature"
      | "sqrt"
      | "totalPools"
      | "transferOwnership"
      | "updateAdminSetting"
      | "updatePool"
      | "verify"
      | "withdrawFromPool"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "adminSetting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRepayAmount",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEthSignedMessageHash",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMessageHash",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolByOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isListedCollection",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "loans",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolOwners",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverSigner",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "splitSignature",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "sqrt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAdminSetting",
    values: [IPikachu.AdminSettingStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromPool",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "adminSetting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateRepayAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositToPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthSignedMessageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMessageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isListedCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "loans", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolOwners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "splitSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sqrt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAdminSetting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromPool",
    data: BytesLike
  ): Result;

  events: {
    "CreatedLoan(address,address,uint256)": EventFragment;
    "CreatedPool(address,uint256,uint256)": EventFragment;
    "LiquidatedLoan(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "UpdatedPool(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreatedLoan"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatedPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidatedLoan"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedPool"): EventFragment;
}

export interface CreatedLoanEventObject {
  poolOwner: string;
  borrower: string;
  amount: BigNumber;
}
export type CreatedLoanEvent = TypedEvent<
  [string, string, BigNumber],
  CreatedLoanEventObject
>;

export type CreatedLoanEventFilter = TypedEventFilter<CreatedLoanEvent>;

export interface CreatedPoolEventObject {
  poolOwner: string;
  poolId: BigNumber;
  amount: BigNumber;
}
export type CreatedPoolEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  CreatedPoolEventObject
>;

export type CreatedPoolEventFilter = TypedEventFilter<CreatedPoolEvent>;

export interface LiquidatedLoanEventObject {
  poolOwner: string;
  borrower: string;
  amount: BigNumber;
}
export type LiquidatedLoanEvent = TypedEvent<
  [string, string, BigNumber],
  LiquidatedLoanEventObject
>;

export type LiquidatedLoanEventFilter = TypedEventFilter<LiquidatedLoanEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface UpdatedPoolEventObject {
  poolOwner: string;
  poolId: BigNumber;
}
export type UpdatedPoolEvent = TypedEvent<
  [string, BigNumber],
  UpdatedPoolEventObject
>;

export type UpdatedPoolEventFilter = TypedEventFilter<UpdatedPoolEvent>;

export interface Pikachu extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PikachuInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    adminSetting(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number, number] & {
        feeTo: string;
        minDepositAmount: BigNumber;
        platformFee: number;
        blockNumberSlippage: number;
      }
    >;

    borrow(
      _poolOwner: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      _floorPrice: PromiseOrValue<BigNumberish>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calculateRepayAmount(
      _durationSecond: PromiseOrValue<BigNumberish>,
      _interestType: PromiseOrValue<BigNumberish>,
      _interestStartRate: PromiseOrValue<BigNumberish>,
      _interestCapRate: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    createPool(
      _loanToValue: PromiseOrValue<BigNumberish>,
      _maxAmount: PromiseOrValue<BigNumberish>,
      _interestType: PromiseOrValue<BigNumberish>,
      _interestStartRate: PromiseOrValue<BigNumberish>,
      _interestCapRate: PromiseOrValue<BigNumberish>,
      _maxDuration: PromiseOrValue<BigNumberish>,
      _compound: PromiseOrValue<boolean>,
      _collections: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositToPool(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getEthSignedMessageHash(
      _messageHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMessageHash(
      _collection: PromiseOrValue<string>,
      _floorPrice: PromiseOrValue<BigNumberish>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPoolById(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IPikachu.PoolStructOutput]>;

    getPoolByOwner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IPikachu.PoolStructOutput]>;

    isListedCollection(
      _collections: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[boolean] & { isListed: boolean }>;

    liquidate(
      _loan: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    loans(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber
      ] & {
        borrower: string;
        amount: BigNumber;
        duration: BigNumber;
        collection: string;
        tokenId: BigNumber;
        status: number;
        blockNumber: BigNumber;
        timestamp: BigNumber;
        interestType: number;
        interestStartRate: BigNumber;
        interestCapRate: BigNumber;
      }
    >;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    poolOwners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    recoverSigner(
      _ethSignedMessageHash: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repay(
      _poolOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    splitSignature(
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, string, number] & { r: string; s: string; v: number }>;

    sqrt(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { y: BigNumber }>;

    totalPools(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAdminSetting(
      _adminSetting: IPikachu.AdminSettingStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePool(
      _loanToValue: PromiseOrValue<BigNumberish>,
      _maxAmount: PromiseOrValue<BigNumberish>,
      _interestType: PromiseOrValue<BigNumberish>,
      _interestStartRate: PromiseOrValue<BigNumberish>,
      _interestCapRate: PromiseOrValue<BigNumberish>,
      _maxDuration: PromiseOrValue<BigNumberish>,
      _compound: PromiseOrValue<boolean>,
      _collections: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verify(
      _signer: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _floorPrice: PromiseOrValue<BigNumberish>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdrawFromPool(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  adminSetting(
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, number, number] & {
      feeTo: string;
      minDepositAmount: BigNumber;
      platformFee: number;
      blockNumberSlippage: number;
    }
  >;

  borrow(
    _poolOwner: PromiseOrValue<string>,
    _collection: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _duration: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    _signature: PromiseOrValue<BytesLike>,
    _floorPrice: PromiseOrValue<BigNumberish>,
    _blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calculateRepayAmount(
    _durationSecond: PromiseOrValue<BigNumberish>,
    _interestType: PromiseOrValue<BigNumberish>,
    _interestStartRate: PromiseOrValue<BigNumberish>,
    _interestCapRate: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createPool(
    _loanToValue: PromiseOrValue<BigNumberish>,
    _maxAmount: PromiseOrValue<BigNumberish>,
    _interestType: PromiseOrValue<BigNumberish>,
    _interestStartRate: PromiseOrValue<BigNumberish>,
    _interestCapRate: PromiseOrValue<BigNumberish>,
    _maxDuration: PromiseOrValue<BigNumberish>,
    _compound: PromiseOrValue<boolean>,
    _collections: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositToPool(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getEthSignedMessageHash(
    _messageHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getMessageHash(
    _collection: PromiseOrValue<string>,
    _floorPrice: PromiseOrValue<BigNumberish>,
    _blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getPoolById(
    _poolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IPikachu.PoolStructOutput>;

  getPoolByOwner(
    _owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IPikachu.PoolStructOutput>;

  isListedCollection(
    _collections: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  liquidate(
    _loan: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  loans(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      number,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber
    ] & {
      borrower: string;
      amount: BigNumber;
      duration: BigNumber;
      collection: string;
      tokenId: BigNumber;
      status: number;
      blockNumber: BigNumber;
      timestamp: BigNumber;
      interestType: number;
      interestStartRate: BigNumber;
      interestCapRate: BigNumber;
    }
  >;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  poolOwners(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  recoverSigner(
    _ethSignedMessageHash: PromiseOrValue<BytesLike>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repay(
    _poolOwner: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  splitSignature(
    sig: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string, string, number] & { r: string; s: string; v: number }>;

  sqrt(
    x: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalPools(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAdminSetting(
    _adminSetting: IPikachu.AdminSettingStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePool(
    _loanToValue: PromiseOrValue<BigNumberish>,
    _maxAmount: PromiseOrValue<BigNumberish>,
    _interestType: PromiseOrValue<BigNumberish>,
    _interestStartRate: PromiseOrValue<BigNumberish>,
    _interestCapRate: PromiseOrValue<BigNumberish>,
    _maxDuration: PromiseOrValue<BigNumberish>,
    _compound: PromiseOrValue<boolean>,
    _collections: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verify(
    _signer: PromiseOrValue<string>,
    _collection: PromiseOrValue<string>,
    _floorPrice: PromiseOrValue<BigNumberish>,
    _blockNumber: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdrawFromPool(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    adminSetting(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number, number] & {
        feeTo: string;
        minDepositAmount: BigNumber;
        platformFee: number;
        blockNumberSlippage: number;
      }
    >;

    borrow(
      _poolOwner: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      _floorPrice: PromiseOrValue<BigNumberish>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateRepayAmount(
      _durationSecond: PromiseOrValue<BigNumberish>,
      _interestType: PromiseOrValue<BigNumberish>,
      _interestStartRate: PromiseOrValue<BigNumberish>,
      _interestCapRate: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createPool(
      _loanToValue: PromiseOrValue<BigNumberish>,
      _maxAmount: PromiseOrValue<BigNumberish>,
      _interestType: PromiseOrValue<BigNumberish>,
      _interestStartRate: PromiseOrValue<BigNumberish>,
      _interestCapRate: PromiseOrValue<BigNumberish>,
      _maxDuration: PromiseOrValue<BigNumberish>,
      _compound: PromiseOrValue<boolean>,
      _collections: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    depositToPool(overrides?: CallOverrides): Promise<void>;

    getEthSignedMessageHash(
      _messageHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getMessageHash(
      _collection: PromiseOrValue<string>,
      _floorPrice: PromiseOrValue<BigNumberish>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getPoolById(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IPikachu.PoolStructOutput>;

    getPoolByOwner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IPikachu.PoolStructOutput>;

    isListedCollection(
      _collections: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    liquidate(
      _loan: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    loans(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber
      ] & {
        borrower: string;
        amount: BigNumber;
        duration: BigNumber;
        collection: string;
        tokenId: BigNumber;
        status: number;
        blockNumber: BigNumber;
        timestamp: BigNumber;
        interestType: number;
        interestStartRate: BigNumber;
        interestCapRate: BigNumber;
      }
    >;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    poolOwners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    recoverSigner(
      _ethSignedMessageHash: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    repay(
      _poolOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    splitSignature(
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, string, number] & { r: string; s: string; v: number }>;

    sqrt(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalPools(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAdminSetting(
      _adminSetting: IPikachu.AdminSettingStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePool(
      _loanToValue: PromiseOrValue<BigNumberish>,
      _maxAmount: PromiseOrValue<BigNumberish>,
      _interestType: PromiseOrValue<BigNumberish>,
      _interestStartRate: PromiseOrValue<BigNumberish>,
      _interestCapRate: PromiseOrValue<BigNumberish>,
      _maxDuration: PromiseOrValue<BigNumberish>,
      _compound: PromiseOrValue<boolean>,
      _collections: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    verify(
      _signer: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _floorPrice: PromiseOrValue<BigNumberish>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawFromPool(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CreatedLoan(address,address,uint256)"(
      poolOwner?: PromiseOrValue<string> | null,
      borrower?: PromiseOrValue<string> | null,
      amount?: null
    ): CreatedLoanEventFilter;
    CreatedLoan(
      poolOwner?: PromiseOrValue<string> | null,
      borrower?: PromiseOrValue<string> | null,
      amount?: null
    ): CreatedLoanEventFilter;

    "CreatedPool(address,uint256,uint256)"(
      poolOwner?: PromiseOrValue<string> | null,
      poolId?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): CreatedPoolEventFilter;
    CreatedPool(
      poolOwner?: PromiseOrValue<string> | null,
      poolId?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): CreatedPoolEventFilter;

    "LiquidatedLoan(address,address,uint256)"(
      poolOwner?: PromiseOrValue<string> | null,
      borrower?: PromiseOrValue<string> | null,
      amount?: null
    ): LiquidatedLoanEventFilter;
    LiquidatedLoan(
      poolOwner?: PromiseOrValue<string> | null,
      borrower?: PromiseOrValue<string> | null,
      amount?: null
    ): LiquidatedLoanEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "UpdatedPool(address,uint256)"(
      poolOwner?: PromiseOrValue<string> | null,
      poolId?: PromiseOrValue<BigNumberish> | null
    ): UpdatedPoolEventFilter;
    UpdatedPool(
      poolOwner?: PromiseOrValue<string> | null,
      poolId?: PromiseOrValue<BigNumberish> | null
    ): UpdatedPoolEventFilter;
  };

  estimateGas: {
    adminSetting(overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      _poolOwner: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      _floorPrice: PromiseOrValue<BigNumberish>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calculateRepayAmount(
      _durationSecond: PromiseOrValue<BigNumberish>,
      _interestType: PromiseOrValue<BigNumberish>,
      _interestStartRate: PromiseOrValue<BigNumberish>,
      _interestCapRate: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createPool(
      _loanToValue: PromiseOrValue<BigNumberish>,
      _maxAmount: PromiseOrValue<BigNumberish>,
      _interestType: PromiseOrValue<BigNumberish>,
      _interestStartRate: PromiseOrValue<BigNumberish>,
      _interestCapRate: PromiseOrValue<BigNumberish>,
      _maxDuration: PromiseOrValue<BigNumberish>,
      _compound: PromiseOrValue<boolean>,
      _collections: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositToPool(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getEthSignedMessageHash(
      _messageHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMessageHash(
      _collection: PromiseOrValue<string>,
      _floorPrice: PromiseOrValue<BigNumberish>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolById(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolByOwner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isListedCollection(
      _collections: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidate(
      _loan: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    loans(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    poolOwners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recoverSigner(
      _ethSignedMessageHash: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repay(
      _poolOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    splitSignature(
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sqrt(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalPools(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAdminSetting(
      _adminSetting: IPikachu.AdminSettingStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePool(
      _loanToValue: PromiseOrValue<BigNumberish>,
      _maxAmount: PromiseOrValue<BigNumberish>,
      _interestType: PromiseOrValue<BigNumberish>,
      _interestStartRate: PromiseOrValue<BigNumberish>,
      _interestCapRate: PromiseOrValue<BigNumberish>,
      _maxDuration: PromiseOrValue<BigNumberish>,
      _compound: PromiseOrValue<boolean>,
      _collections: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verify(
      _signer: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _floorPrice: PromiseOrValue<BigNumberish>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFromPool(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    adminSetting(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrow(
      _poolOwner: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      _floorPrice: PromiseOrValue<BigNumberish>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calculateRepayAmount(
      _durationSecond: PromiseOrValue<BigNumberish>,
      _interestType: PromiseOrValue<BigNumberish>,
      _interestStartRate: PromiseOrValue<BigNumberish>,
      _interestCapRate: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createPool(
      _loanToValue: PromiseOrValue<BigNumberish>,
      _maxAmount: PromiseOrValue<BigNumberish>,
      _interestType: PromiseOrValue<BigNumberish>,
      _interestStartRate: PromiseOrValue<BigNumberish>,
      _interestCapRate: PromiseOrValue<BigNumberish>,
      _maxDuration: PromiseOrValue<BigNumberish>,
      _compound: PromiseOrValue<boolean>,
      _collections: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositToPool(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getEthSignedMessageHash(
      _messageHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMessageHash(
      _collection: PromiseOrValue<string>,
      _floorPrice: PromiseOrValue<BigNumberish>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolById(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolByOwner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isListedCollection(
      _collections: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidate(
      _loan: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    loans(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolOwners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recoverSigner(
      _ethSignedMessageHash: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repay(
      _poolOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    splitSignature(
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sqrt(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAdminSetting(
      _adminSetting: IPikachu.AdminSettingStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePool(
      _loanToValue: PromiseOrValue<BigNumberish>,
      _maxAmount: PromiseOrValue<BigNumberish>,
      _interestType: PromiseOrValue<BigNumberish>,
      _interestStartRate: PromiseOrValue<BigNumberish>,
      _interestCapRate: PromiseOrValue<BigNumberish>,
      _maxDuration: PromiseOrValue<BigNumberish>,
      _compound: PromiseOrValue<boolean>,
      _collections: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verify(
      _signer: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _floorPrice: PromiseOrValue<BigNumberish>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFromPool(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
